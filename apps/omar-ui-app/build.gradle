buildscript {
  ext {
    grailsVersion = project.grailsVersion
    baseImage = "omar-base"
  }
  if(System.env.OMAR_COMMON_PROPERTIES)
  {
    apply from: System.env.OMAR_COMMON_PROPERTIES
  }
  repositories {
    mavenLocal()
    maven { url "${ossimMavenProxy}" }
    maven { url "https://repo.grails.org/grails/core" }
  }
  dependencies {
    classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
    classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPipelineGradleV"
    classpath "net.errbuddy.plugins:babel-asset-pipeline:${babelAssetPipelineV}"
  }
}

plugins {
  id "com.github.ben-manes.versions" version "0.17.0"
  id "org.sonarqube" version "2.6.2"
}

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.grails.grails-web"
apply plugin: "org.grails.grails-gsp"
apply plugin: "asset-pipeline"

apply plugin: "java"
apply plugin: "maven-publish"
apply plugin: "maven"

group "io.ossim.omar.apps"

ext {
  grailsVersion = project.grailsVersion
  gradleWrapperVersion = project.gradleWrapperVersion
}

assets {
  minifyJs = true
  minifyCss = true
  includes = ["**/fonts/**"]
  excludes = [
    //"**/application.js",
    "**/i18n/**",
    "**/jquery*",
    "**/omar/**",
    "**/webjars/**",
    "**/*-debug.js",
    "**/*-deps.js",
    "**/*-openlayers*",
    "**/*.gz",
    "**/*.html",
    "**/*.txt",
  ]
}

repositories {
  // maven { url  "http://dl.bintray.com/dmahapatro/plugins" }
  mavenLocal()
  maven { url "${ossimMavenProxy}" }
  maven { url "https://repo.grails.org/grails/core" }
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudDependencyV}"
  }
  applyMavenExclusions false
}

grails {
  pathingJar=true
  plugins {
      compile project(':omar-openlayers-plugin')
      compile project(':omar-core-plugin')
      compile project(':omar-hibernate-spatial-plugin')
  }
}

dependencies {
/*
  if ( System.getenv('O2_DEV_HOME') ) {
      compile project(':omar-openlayers-plugin')
      compile project(':omar-core-plugin')
      compile project(':omar-hibernate-spatial-plugin')
  } else {
    compile(group: "io.ossim.omar.plugins", name: "omar-openlayers-plugin", version: "1.0.0-${buildVersionTag}", changing: jarArtifactsChanging)
    compile(group: "io.ossim.omar.plugins", name: "omar-core-plugin", version: "1.1.0-${buildVersionTag}", changing: jarArtifactsChanging)
    compile(group: "io.ossim.omar.plugins", name: "omar-hibernate-spatial-plugin", version: "1.0.0-${buildVersionTag}", changing: jarArtifactsChanging)
  }
*/

  compile "de.codecentric:spring-boot-admin-starter-client:${springBootAdminStarterClientV}"

  compile "org.grails.plugins:browser-detection:3.3.0"

  // UI Webjar core dependencies
  compile "org.webjars:jquery:2.1.4"
  compile "org.webjars:jquery-ui:1.10.3"
  compile "org.webjars:bootstrap:3.3.5"
  compile "org.webjars.bower:angularjs:1.4.8"
  compile "org.webjars:angular-ui-router:0.2.15"
  compile "org.webjars.npm:angular-ui-bootstrap:0.14.3"
  compile "org.webjars:angular-deferred-bootstrap:0.1.5"
  compile "org.webjars.bower:bootstrap-select:${bootstrapSelectV}"
  compile "org.webjars.bower:devbridge-autocomplete:1.2.21"
  compile "org.webjars:spin-js:2.1.0"
  compile "org.webjars.npm:angular-spinner:0.7.0"
  compile "org.webjars.bower:angular-toastr:1.6.0"
  compile "org.webjars:momentjs:2.11.0"
  compile "org.webjars:angular-strap:2.3.4"
  compile "org.webjars.npm:slick-carousel:${slickCarouselV}"
  compile "org.webjars.bower:angular-slick-carousel:${angularSlickCarouselV}"
  compile "org.webjars.bower:angular-toggle-switch:1.3.0"
  compile "org.webjars.bower:angular-clipboard:1.4.2"
  compile "org.webjars:angular-ui-select:0.17.1"
  compile "org.webjars.bower:angular-ui-select2:0.0.5"
  compile "org.webjars.npm:angular-sanitize:1.4.8"
  compile "org.webjars.bower:microplugin:0.0.3"
  compile "org.webjars:selectize.js:${selectizeV}"
  compile "org.webjars.bower:seiyria-bootstrap-slider:${seiyriaBootstrapSliderV}"

  // Font stuff
  compile "org.webjars:font-awesome:4.4.0"

  // Dark .css themes
  compile "org.webjars:bootswatch-darkly:3.3.5+4"
  compile "org.webjars:bootswatch-slate:3.3.5+4"
  compile "org.webjars:bootswatch-superhero:3.3.5+4"

  // Light .css themes
  compile "org.webjars:bootswatch-spacelab:3.3.5+4"
  compile "org.webjars:bootswatch-cosmo:3.3.5+4"
  compile "org.webjars:bootswatch-flatly:3.3.5+4"
  compile "org.webjars:bootswatch-default:3.3.5+4"

  compile "org.springframework.cloud:spring-cloud-starter-config"
  compile "org.springframework.cloud:spring-cloud-starter-eureka"
  //compile "org.springframework.cloud:spring-cloud-starter-zipkin"

  compile "net.errbuddy.plugins:babel-asset-pipeline:${babelAssetPipelineV}"

  compile "org.springframework.boot:spring-boot-starter-logging"
  compile "org.springframework.boot:spring-boot-autoconfigure"
  compile "org.grails:grails-core"
  compile "org.springframework.boot:spring-boot-starter-actuator"
  compile "org.springframework.boot:spring-boot-starter-tomcat"
  compile "org.grails:grails-web-boot"
  compile "org.grails:grails-logging"
  compile "org.grails:grails-plugin-rest"
  compile "org.grails:grails-plugin-databinding"
  compile "org.grails:grails-plugin-i18n"
  compile "org.grails:grails-plugin-services"
  compile "org.grails:grails-plugin-url-mappings"
  compile "org.grails:grails-plugin-interceptors"
  compile "org.grails.plugins:cache"
  compile "org.grails.plugins:async"
  compile "org.grails.plugins:scaffolding"
  compile "org.grails.plugins:events"
  compile "org.grails.plugins:hibernate5"
  compile "org.hibernate:hibernate-core:${hibernateCoreV}"
  compile "org.grails.plugins:gsp"
  console "org.grails:grails-console"
  profile "org.grails.profiles:web"
  runtime "org.glassfish.web:el-impl:${elImplV}"
  runtime "com.h2database:h2"
  runtime "org.apache.tomcat:tomcat-jdbc"
  runtime "com.bertramlabs.plugins:asset-pipeline-grails:$assetPipelineGrailsV"
  testCompile "org.grails:grails-gorm-testing-support"
  testCompile "org.grails.plugins:geb"
  testCompile "org.grails:grails-web-testing-support"
  testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:${seleniumHtmlUnitDriverV}"
  testRuntime "net.sourceforge.htmlunit:htmlunit:${htmlUnitV}"

}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}

bootRun {
    jvmArgs = [
    ]
}
